Test case for 0-add_integer
==============================
This module add two integer or floats together

=================================================

Importing the function:
    >>> add_integer = __import__('0-add_integer').add_integer

Adding two positive intergers together(a = 2 and b= 3):
    >>> add_integer(2, 3)
    5

Adding one positive integer and a negative integer(a = 4 and b = -1):
    >>> add_integer(4, -1)
    3

Adding two negative integers(-5 and -3):
    >>> add_integer(-5, -3)
    -8

Adding and integer and a string(3 and "people"):
    >>> add_integer(3, "people")
    Traceback (most recent call last):
              ...
    TypeError: b must be an integer

Adding and integer with the default value of b (2, b=98):
    >>> add_integer(2)
    100

Case overflow:

    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
              ...
    OverflowError: cannot convert float infinity to integer

Case overflow2:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
              ...
    OverflowError: cannot convert float infinity to integer

Case NaN:
    >>> add_integer(float('nan'), 0)
    Traceback (most recent call last):
              ...
    ValueError: cannot convert float NaN to integer

Case NaN2:
    >>> add_integer(float('nan'))
    Traceback (most recent call last):
              ...
    ValueError: cannot convert float NaN to integer
